{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNxsVMKAMpCZ3qtm3lwUrtf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shashankchintu99/semester3-projects/blob/main/deeplearning/assignments/Assignmet-2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# QMNIST Classification using MLP"
      ],
      "metadata": {
        "id": "fCS3z6_plWX0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 1: Setup\n",
        "This notebook demonstrates the process of classifying the QMNIST dataset using a Multi-Layer Perceptron (MLP)."
      ],
      "metadata": {
        "id": "HEkYlzkylcDL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.data import DataLoader\n",
        "import matplotlib.pyplot as plt\n",
        "import torchvision.datasets as datasets\n"
      ],
      "metadata": {
        "id": "92Saxiybllo7"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 2: Load and Preprocess the QMNIST Dataset and reproduce the results utilizing the \"QMNIST\" dataset\n",
        "We'll load the QMNIST dataset and preprocess it for our MLP."
      ],
      "metadata": {
        "id": "mZnK1ZH1sGM5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Load QMNIST dataset and preprocess\n",
        "transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])\n",
        "train_dataset = torchvision.datasets.QMNIST(root='./data', train=True, download=True, transform=transform)\n",
        "test_dataset = torchvision.datasets.QMNIST(root='./data', train=False, download=True, transform=transform)\n",
        "\n",
        "# Create data loaders\n",
        "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vf2_NjmMlZv-",
        "outputId": "cb31dd2e-3144-4dad-9870-ddf1c75326ee"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://raw.githubusercontent.com/facebookresearch/qmnist/master/qmnist-train-images-idx3-ubyte.gz to ./data/QMNIST/raw/qmnist-train-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 9704059/9704059 [00:00<00:00, 33318440.40it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./data/QMNIST/raw/qmnist-train-images-idx3-ubyte.gz to ./data/QMNIST/raw\n",
            "Downloading https://raw.githubusercontent.com/facebookresearch/qmnist/master/qmnist-train-labels-idx2-int.gz to ./data/QMNIST/raw/qmnist-train-labels-idx2-int.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 463024/463024 [00:00<00:00, 3318030.94it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./data/QMNIST/raw/qmnist-train-labels-idx2-int.gz to ./data/QMNIST/raw\n",
            "Downloading https://raw.githubusercontent.com/facebookresearch/qmnist/master/qmnist-test-images-idx3-ubyte.gz to ./data/QMNIST/raw/qmnist-test-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 9742279/9742279 [00:00<00:00, 28505351.83it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./data/QMNIST/raw/qmnist-test-images-idx3-ubyte.gz to ./data/QMNIST/raw\n",
            "Downloading https://raw.githubusercontent.com/facebookresearch/qmnist/master/qmnist-test-labels-idx2-int.gz to ./data/QMNIST/raw/qmnist-test-labels-idx2-int.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 526800/526800 [00:00<00:00, 4205928.59it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./data/QMNIST/raw/qmnist-test-labels-idx2-int.gz to ./data/QMNIST/raw\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 3: Build the MLP Model\n",
        "We'll build a basic MLP model for classification."
      ],
      "metadata": {
        "id": "NvFLlufcsIQL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "\n",
        "# Define the labels for QMNIST - Update this based on QMNIST dataset\n",
        "labels_map = {\n",
        "    # Update these values based on the QMNIST labels\n",
        "    0: \"Label0\",\n",
        "    1: \"Label1\",\n",
        "    2: \"Label2\",\n",
        "    3: \"Label3\",\n",
        "    4: \"Label4\",\n",
        "    5: \"Label5\",\n",
        "    6: \"Label6\",\n",
        "    7: \"Label7\",\n",
        "    8: \"Label8\",\n",
        "    9: \"Label9\",\n",
        "}\n",
        "\n",
        "# Create a figure for plotting\n",
        "figure = plt.figure(figsize=(8, 8))\n",
        "cols, rows = 3, 3\n",
        "\n",
        "for i in range(1, cols * rows + 1):\n",
        "    # Randomly select an index from the dataset\n",
        "    sample_idx = torch.randint(len(train_dataset), size=(1,)).item()\n",
        "\n",
        "    # Get the image and label from the dataset\n",
        "    img, label = train_dataset[sample_idx]\n",
        "\n",
        "    # Add a subplot for each image\n",
        "    figure.add_subplot(rows, cols, i)\n",
        "    plt.title(labels_map[label])\n",
        "    plt.axis(\"off\")\n",
        "\n",
        "    # If your images are not in grayscale, remove cmap=\"gray\"\n",
        "    plt.imshow(img.squeeze(), cmap=\"gray\")\n",
        "\n",
        "# Show the figure\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "RG6MuBgAmsdO",
        "outputId": "207ace48-cd7c-4563-ad9a-0f063c5ac543"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "gpPSK7iksMRy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a figure for plotting test data\n",
        "figure = plt.figure(figsize=(8, 8))\n",
        "cols, rows = 3, 3\n",
        "\n",
        "for i in range(1, cols * rows + 1):\n",
        "    sample_idx = torch.randint(len(test_dataset), size=(1,)).item()\n",
        "    img, label = test_dataset[sample_idx]\n",
        "\n",
        "    figure.add_subplot(rows, cols, i)\n",
        "    plt.title(labels_map[label])\n",
        "    plt.axis(\"off\")\n",
        "    plt.imshow(img.squeeze(), cmap=\"gray\")\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "w2w2aIahoLVa",
        "outputId": "661bdb17-885d-4a55-a381-0901f4da1533"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Define the neural network architecture\n",
        "class MLP(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(MLP, self).__init__()\n",
        "        self.fc1 = nn.Linear(28 * 28, 128)\n",
        "        self.fc2 = nn.Linear(128, 64)\n",
        "        self.fc3 = nn.Linear(64, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.view(-1, 28 * 28)\n",
        "        x = torch.relu(self.fc1(x))\n",
        "        x = torch.relu(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "        return x\n",
        "\n",
        "# Initialize the neural network\n",
        "model = MLP()"
      ],
      "metadata": {
        "id": "07128o2Yshgw"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the loss function and optimizer\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
        "\n",
        "# Train the neural network\n",
        "num_epochs = 5\n",
        "for epoch in range(num_epochs):\n",
        "    model.train()\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        inputs, labels = data\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        running_loss += loss.item()\n",
        "        if i % 100 == 99:  # print every 100 mini-batches\n",
        "            print(f'Epoch {epoch + 1}, Batch {i + 1}, Loss: {running_loss / 100}')\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OznxnSiXsngP",
        "outputId": "59095285-057e-4078-d5f0-daaaf62ab326"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1, Batch 100, Loss: 1.052091244161129\n",
            "Epoch 1, Batch 200, Loss: 0.4533961772918701\n",
            "Epoch 1, Batch 300, Loss: 0.3891748303174973\n",
            "Epoch 1, Batch 400, Loss: 0.35779852703213694\n",
            "Epoch 1, Batch 500, Loss: 0.3203877664357424\n",
            "Epoch 1, Batch 600, Loss: 0.30781988084316253\n",
            "Epoch 1, Batch 700, Loss: 0.2879497031867504\n",
            "Epoch 1, Batch 800, Loss: 0.2692425588518381\n",
            "Epoch 1, Batch 900, Loss: 0.27160065710544584\n",
            "Epoch 2, Batch 100, Loss: 0.23332732032984496\n",
            "Epoch 2, Batch 200, Loss: 0.21880535915493965\n",
            "Epoch 2, Batch 300, Loss: 0.20644821271300315\n",
            "Epoch 2, Batch 400, Loss: 0.2152039109170437\n",
            "Epoch 2, Batch 500, Loss: 0.20616024304181338\n",
            "Epoch 2, Batch 600, Loss: 0.1881258149817586\n",
            "Epoch 2, Batch 700, Loss: 0.18346670508384705\n",
            "Epoch 2, Batch 800, Loss: 0.1750205212831497\n",
            "Epoch 2, Batch 900, Loss: 0.17247735582292079\n",
            "Epoch 3, Batch 100, Loss: 0.15396081794053315\n",
            "Epoch 3, Batch 200, Loss: 0.15849731964990496\n",
            "Epoch 3, Batch 300, Loss: 0.13804083950817586\n",
            "Epoch 3, Batch 400, Loss: 0.14469681870192289\n",
            "Epoch 3, Batch 500, Loss: 0.1486619702540338\n",
            "Epoch 3, Batch 600, Loss: 0.13148510137572886\n",
            "Epoch 3, Batch 700, Loss: 0.1438949523679912\n",
            "Epoch 3, Batch 800, Loss: 0.14978246814571322\n",
            "Epoch 3, Batch 900, Loss: 0.13914298348128795\n",
            "Epoch 4, Batch 100, Loss: 0.11528186751529575\n",
            "Epoch 4, Batch 200, Loss: 0.12577705522999166\n",
            "Epoch 4, Batch 300, Loss: 0.11541378518566489\n",
            "Epoch 4, Batch 400, Loss: 0.11718762433156371\n",
            "Epoch 4, Batch 500, Loss: 0.11689019601792097\n",
            "Epoch 4, Batch 600, Loss: 0.11055213445797563\n",
            "Epoch 4, Batch 700, Loss: 0.11562640234827995\n",
            "Epoch 4, Batch 800, Loss: 0.11998576821759344\n",
            "Epoch 4, Batch 900, Loss: 0.1125046619400382\n",
            "Epoch 5, Batch 100, Loss: 0.10302474013529718\n",
            "Epoch 5, Batch 200, Loss: 0.08669333310797811\n",
            "Epoch 5, Batch 300, Loss: 0.11496298366226256\n",
            "Epoch 5, Batch 400, Loss: 0.099893698412925\n",
            "Epoch 5, Batch 500, Loss: 0.09732001269236207\n",
            "Epoch 5, Batch 600, Loss: 0.09163807334378361\n",
            "Epoch 5, Batch 700, Loss: 0.08526485185138881\n",
            "Epoch 5, Batch 800, Loss: 0.09697007355280221\n",
            "Epoch 5, Batch 900, Loss: 0.10489700678735972\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model\n",
        "model.eval()\n",
        "correct = 0\n",
        "total = 0\n",
        "with torch.no_grad():\n",
        "    for data in test_loader:\n",
        "        images, labels = data\n",
        "        outputs = model(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "print(f'Accuracy on test set: { correct / total *100}%')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X8LHP7Isspxc",
        "outputId": "b8c3ade9-c7a4-407f-edc0-b6f65841faba"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test set: 95.45%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 4: Build the Modified-MLP Model\n",
        "We'll build a modified MLP model for classification.\n",
        "\n",
        "1)Add another Dense layer of 128 nodes\n",
        "\n",
        "2)Increase the current number of nodes in the layer to 256\n"
      ],
      "metadata": {
        "id": "ryz7ucOQtMY5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Define the neural network architecture\n",
        "class MLP(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(MLP, self).__init__()\n",
        "        # First layer increased to 256 nodes\n",
        "        self.fc1 = nn.Linear(28 * 28, 256)\n",
        "        # Additional layer with 128 nodes\n",
        "        self.fc2 = nn.Linear(256, 128)\n",
        "        # Existing layers adjusted accordingly\n",
        "        self.fc3 = nn.Linear(128, 64)\n",
        "        self.fc4 = nn.Linear(64, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.view(-1, 28 * 28)\n",
        "        x = torch.relu(self.fc1(x))\n",
        "        x = torch.relu(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "        return x\n",
        "\n",
        "# Initialize the neural network\n",
        "modified_model = MLP()"
      ],
      "metadata": {
        "id": "u856QXKYpZuj"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the loss function and optimizer\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(modified_model.parameters(), lr=0.001)\n",
        "\n",
        "# Train the neural network\n",
        "num_epochs = 5\n",
        "for epoch in range(num_epochs):\n",
        "    model.train()\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        inputs, labels = data\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        running_loss += loss.item()\n",
        "        if i % 100 == 99:  # print every 100 mini-batches\n",
        "            print(f'Epoch {epoch + 1}, Batch {i + 1}, Loss: {running_loss / 100}')\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5lDt9_QCpgmZ",
        "outputId": "f31a5241-8eea-4ef9-d749-35cd2057c1c6"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1, Batch 100, Loss: 0.11444664879702032\n",
            "Epoch 1, Batch 200, Loss: 0.10876011116430163\n",
            "Epoch 1, Batch 300, Loss: 0.10837568430230021\n",
            "Epoch 1, Batch 400, Loss: 0.10209225629456341\n",
            "Epoch 1, Batch 500, Loss: 0.11332564949989318\n",
            "Epoch 1, Batch 600, Loss: 0.1081197283603251\n",
            "Epoch 1, Batch 700, Loss: 0.10644847209565342\n",
            "Epoch 1, Batch 800, Loss: 0.11192861874587834\n",
            "Epoch 1, Batch 900, Loss: 0.11030719512142241\n",
            "Epoch 2, Batch 100, Loss: 0.09492477552965284\n",
            "Epoch 2, Batch 200, Loss: 0.11574727147817612\n",
            "Epoch 2, Batch 300, Loss: 0.10490676594898105\n",
            "Epoch 2, Batch 400, Loss: 0.11525810150429606\n",
            "Epoch 2, Batch 500, Loss: 0.10799400940537453\n",
            "Epoch 2, Batch 600, Loss: 0.1096606770157814\n",
            "Epoch 2, Batch 700, Loss: 0.11630502332001924\n",
            "Epoch 2, Batch 800, Loss: 0.10411960434168577\n",
            "Epoch 2, Batch 900, Loss: 0.11273361224681139\n",
            "Epoch 3, Batch 100, Loss: 0.11076974760740996\n",
            "Epoch 3, Batch 200, Loss: 0.11879308819770813\n",
            "Epoch 3, Batch 300, Loss: 0.10490640440955758\n",
            "Epoch 3, Batch 400, Loss: 0.1020140294265002\n",
            "Epoch 3, Batch 500, Loss: 0.10323769817128778\n",
            "Epoch 3, Batch 600, Loss: 0.10176084965933115\n",
            "Epoch 3, Batch 700, Loss: 0.10629482456482947\n",
            "Epoch 3, Batch 800, Loss: 0.11817991400137544\n",
            "Epoch 3, Batch 900, Loss: 0.11101181317120791\n",
            "Epoch 4, Batch 100, Loss: 0.1036102457344532\n",
            "Epoch 4, Batch 200, Loss: 0.11455159900709987\n",
            "Epoch 4, Batch 300, Loss: 0.1145551890321076\n",
            "Epoch 4, Batch 400, Loss: 0.10593259756453335\n",
            "Epoch 4, Batch 500, Loss: 0.11153148861601948\n",
            "Epoch 4, Batch 600, Loss: 0.10943113312125206\n",
            "Epoch 4, Batch 700, Loss: 0.11003895478323102\n",
            "Epoch 4, Batch 800, Loss: 0.10034378618001938\n",
            "Epoch 4, Batch 900, Loss: 0.11668783909641206\n",
            "Epoch 5, Batch 100, Loss: 0.10239974439609796\n",
            "Epoch 5, Batch 200, Loss: 0.09757535776123405\n",
            "Epoch 5, Batch 300, Loss: 0.10003211420029402\n",
            "Epoch 5, Batch 400, Loss: 0.11082555785775185\n",
            "Epoch 5, Batch 500, Loss: 0.10991774290800095\n",
            "Epoch 5, Batch 600, Loss: 0.12385139625519515\n",
            "Epoch 5, Batch 700, Loss: 0.10266647752374411\n",
            "Epoch 5, Batch 800, Loss: 0.11320524531416595\n",
            "Epoch 5, Batch 900, Loss: 0.12184374926611781\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model\n",
        "model.eval()\n",
        "correct = 0\n",
        "total = 0\n",
        "with torch.no_grad():\n",
        "    for data in test_loader:\n",
        "        images, labels = data\n",
        "        outputs = model(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "print(f'Accuracy on test set: { correct / total*100}%')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ebg7AWRSqBJS",
        "outputId": "7f7eb3e3-6172-485e-b856-0ddc389e9016"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test set: 0.9545%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8_b07oeLqNWh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}